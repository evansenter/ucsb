# INPUT FILE: Written by Evan Senter, 3/20/08
#
# This is a comment because the first char on the line is a #
#
#
# CROSSOVER FLIP: The probability that we change which parent we are copying
# the bitstring from during haploid combination
f crossover_flip 0.1
#
# MUTATION RATE: Probability of a bit flip during haploid combination
f mutation_rate 0.05
#
# FOOD FLIP: The chance that a random tile on the Game of Life gets flipped to
# the opposite state (If live, uses poison_prob to determine food / poison)
f food_flip_prob 0.1
#
# MAX INSERTS: When food flip is called, we generate a random number between 0
# and max_inserts of tiles to flip
i max_inserts 5
#
# EVOLUTION FREQ: Number of cycles per evolution
i evolution_freq 20
#
# COUNTER: if counter > 0 terminate when counter-- == 0 else run until all the
# cells have died
i counter 250
#
# CELL RETENTION: Number of cells to keep each evolutionary round,
# cell_retention / 2 new cells are also generated by random pairwise
# combinations of retained parents. Therefore this is a feature of
# over/underbreeding, useful in countering the effects of atrophy
f cell_retention 0.7
#
# LENGTH: The length of the grid, length^2 tiles are created in Conway's and
# the Cell Map
i length 15
#
# CELL PROB: Chance that on initialization, the map[i][j] location will
# contain a cell
f cell_prob 0.25
#
# RETAINED FITNESS: Cells lose fitness * retained_fitness each round,
# therefore when this is < 1, it is a form of atrophy
f retained_fitness 0.95
#
# POISON PROB: Probability that a Conway tile, when being turned 'alive' turns
# to poison
f poison_prob 0.25
#
# WRAP AROUND: Enables wrap around on the Game of Life map
i wrap_around 1
#
# USE INITIAL MAP: If set to 1, it will load the initial Game of Life map
# state from this file. The manner in which it does so is the following:
# X = empty, 0 = food, ie.
# XOX 0
# XXO 1
# OOO 2
# The previous three lines, if uncommented will load the corresponding
# rows into the initial map. The length value above MUST be set to the number
# of lines provided for the initial map as well as the number of characters in
# the starting conditions per line. Therefore, we will always make a square
# (Or sphere if wrap_around = 1)
i use_initial_map 1
#
# INITIAL FOOD PROB: Only used if use_initial_map = 0, determines the
# likelihood that each initial tile on the Game of Life starts with food
f initial_food_prob 0.5
#
# STARTING FITNESS: The starting fitness of each cell (If a cell's fitnes
# drops below 1 they die next cycle)
i starting_fitness 5
#
# NUMBER OF GENES: The number of genes each cell has
i number_of_genes 30
#
# % GENE RESPONDERS: When a cell is to respond to it's environment, it queries
# it's genome for the genes encoding for the most similar situation to the
# present. The percent_gene_responders top percentile is then randomly
# selected from for a response
f percent_gene_responders 0.2
#
# FOOD WEIGHT: There are two portions of the chromosome, the signal and the
# food. Because the signal takes up more bits, this can be used as a
# counter-balance to amplify the importance of food on the cell's decision
i food_weight 5
#
# HEAVY END DATA: Prints heavy per-cycle statistics on completion
i heavy_end_data 1
#
# CSV MODE: If enabled, all printing is silenced until the end, when only the
# per-cycle information is printed in CSV format for easy spreadsheet import.
# Useful for routing output to a file, but it can seem like it's stalling when 
# csv_mode = 1 and counter = 0 because there are no print statements until the 
# end and it doesn't terminate unless the number of cells = 0
# Note: heavy_end_data must be set to 1 for data recording for CSV
i csv_mode 0
#
# INITIAL MAP SETUP (See use_initial_map):
XXXOXXOXOOXOOXX 0
XOOOXXXXXXXOOOX 1
XOXOXOOXOXOXOOO 2
OOXXXXOXOXOOOXO 3
XXOXOOOXXXOOOOX 4
XOXOOXOXOXOOOXX 5
XXXXXXOOOXXXOOX 6
XOOXXOXXOXOXOOO 7
OOXXXXOOOXXXOXO 8
XXOXOOOOOXOXXOX 9
XOXOOXOXOXOOOXX 10
XXXXXXOOOXXXOOX 11
XOOXXOXXOXOXOOO 12
OOXXXXOOOXXXOXO 13
XXOXOOOOOXOXXOX 14
