[Course Outline, Week 2]

[Sequence Alignment]

- Simple scoring mechanism (Without accounting for gaps)
  - (1..end_of_sequence).inject(0) {|score, base_pair| score + (base_pair.match? ? 1 : 0)}
- The total number of possible alignments for two sequences of length m and n is (m + n - 1)
- More complex scoring mechanism (With gaps)
  - f(m, n) => Number of alignments for two strings of length m, n
            = f(m, n - 1) + f(m - 1, n) + f(m - 1, n - 1)
- Nature favors a small number of long gaps over a large number of small gaps

[Dynamic Programming]

- Idea is to solve smaller sub-problems, remember these solutions and use them to solve the larger problem
- See the "coin change problem"
  - The cost of solving this problem is 4 * the length of the table => O(n)
- See the "best path from source to sink"

[Global Sequence Alignment]

- Needleman-Wunsch method
- For amino acid alignment, the BLOSUM45 matrix is a common technique 
  - The number after BLOSUM is an indicator of the level of conservation between the two sets of amino acids
  
[Local Sequence Alignment]

- Smith-Waterman method
- Since one now has the option to reset the comparison (Of local sequences), all scores in the dynamic programming matrix will be >= 0
  - In the dynamic programming matrix, you keep track of pointers encoding information on which cell the ith cell's score was computed off of
  - From these pointers, you can travel backwards to find the optimal substring from the highest scoring node
  - The score 0 is an option in local alignment because the null string matched with itself is a better choice than a negative scoring match
- Affine gaps: When there is a high initial gap penalty, and linear cost for subsequent following gaps

[BLAST (Small query, large database)]

- Steps:
  - Filter low complexity regions (optional)
  - Query words of length 3 (Proteins) or 11 (DNA) are creates from a query sequence using a sliding window
- Instead of trying to compare all possible matches, you assume there are hotspots (Regions of high similarity), and do a focused search in those areas

[Banded Global Alignment]

- Leverages the idea that you can fill out a dynamic programming matrix, but only inspect values within a band

[Suffix Tree]

- Rooted tree of all suffixes of a given string
  - There is a unique label at each edge
- Applications:
  - Finding the longest repeat
  - Longest common substring problem
  - Common substrings of more than two strings
  - Multiple alignment